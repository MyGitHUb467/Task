trigger:
- main  # Adjust this to your main branch name

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    # Download Terraform zip file
    Invoke-WebRequest -Uri "https://releases.hashicorp.com/terraform/1.1.0/terraform_1.1.0_windows_amd64.zip" -OutFile "$Env:TEMP\terraform.zip"

    # Create Terraform directory
    New-Item -ItemType Directory -Force -Path "$Env:ProgramFiles\Terraform"

    # Extract Terraform zip file
    Expand-Archive -Path "$Env:TEMP\terraform.zip" -DestinationPath "$Env:ProgramFiles\Terraform"

    # Add Terraform directory to PATH
    $env:Path += ";$Env:ProgramFiles\Terraform"

    # Verify Terraform installation
    terraform --version
  displayName: 'Install Terraform'



- task: TerraformTaskV1@0
  displayName: 'Terraform Validate and Plan'
  inputs:
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: TerraformTaskV1@0
  displayName: 'Terraform Plan'
  inputs:
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    environmentServiceNameAzureRM: 'FirstPipeline'  # Use your Azure service connection name
    deploymentScope: 'Resource Group'
    deploymentScopeSelector: 'resourceGroupName'
    subscriptionId: '74f18b4b-73a2-49ee-a8b5-9e6f8c8ec835'
    resourceGroupName: 'Dev'
    terraformVersion: 'latest'
    commandOptions: '-out=tfplan'

- task: TerraformTaskV1@0
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    environmentServiceNameAzureRM: 'FirstPipeline'  # Use your Azure service connection name
    deploymentScope: 'Resource Group'
    deploymentScopeSelector: 'resourceGroupName'
    subscriptionId: '74f18b4b-73a2-49ee-a8b5-9e6f8c8ec835'
    resourceGroupName: 'Dev'
    terraformVersion: 'latest'
    commandOptions: '-auto-approve'
